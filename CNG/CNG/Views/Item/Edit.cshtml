@model CNG.Models.Item

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- start: TOOLBAR -->
<div class="toolbar row">
    <div class="col-sm-6 hidden-xs">
        <div class="page-header">
            <h1>Item </h1>
        </div>
    </div>
</div>
<!-- end: TOOLBAR -->
<!-- end: PAGE HEADER -->
<!-- start: BREADCRUMB -->
<div class="row">
    <div class="col-md-12">
        <div class="breadcrumb"></div>
    </div>
</div>
<!-- end: BREADCRUMB -->
<!-- start: PAGE CONTENT -->
<div class="row">
    <div class="col-md-12">
        <!-- start: BASIC TABLE PANEL -->
        <div class="panel panel-white">
            
            <div class="panel-body">

                @using (Html.BeginForm("Edit", "Item"))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        <h4>Manage Item</h4>
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.Id)

                        <div class="form-group">
                            @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.UnitCost, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                <input type="text" id="UnitCost" name="UnitCost" value="@String.Format("{0:#,##0.00}", Model.UnitCost)" class="form-control atm" />
                                @Html.ValidationMessageFor(model => model.UnitCost, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.TypeId, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-5">
                                @Html.DropDownList("TypeId", (IEnumerable<SelectListItem>)ViewBag.ItemTypes, "", new { @class = "form-control" })

                                @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ClassificationId, htmlAttributes: new { @class = "control-label col-md-2" })

                            <div class="col-md-5">
                                @Html.DropDownList("ClassificationId", (IEnumerable<SelectListItem>)ViewBag.ItemClassifications, "", new { @class = "form-control" })

                                @Html.ValidationMessageFor(model => model.ClassificationId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-5">
                                <div class="checkbox">
                                    @Html.EditorFor(model => model.Active)
                                    @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        @*
                            empiricism - clean slate
                            rationaility
                        *@

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <button type="submit" class="btn btn-dark-blue">
                                    Save
                                </button>
                                <a href="@Url.Action("Index")" class="btn btn-dark-beige">
                                    Back to List
                                </a>
                            </div>
                        </div>

                    </div>
                }

            </div>
        </div>
        <!-- end: BASIC TABLE PANEL -->
    </div>
</div>

<script>

    $(document).ready(function () {
        $('ul.main-navigation-menu > li:nth-child(6)').addClass('active open');

        $('ul.main-navigation-menu > li:nth-child(6) ul.sub-menu> li:nth-child(1)').addClass('active');

        var input = ""; //holds current input as a string

        $(".atm").keydown(function (e) {
            //handle backspace key
            if (e.keyCode == 8 && input.length > 0) {
                input = input.slice(0, input.length - 1); //remove last digit
                $(this).val(formatNumber(input));
            }
            else {
                var key = getKeyValue(e.keyCode);
                if (key) {
                    input += key; //add actual digit to the input string
                    $(this).val(formatNumber(input)); //format input string and set the input box value to it
                }
            }
            return false;
        });

        function getKeyValue(keyCode) {
            if (keyCode > 57) { //also check for numpad keys
                keyCode -= 48;
            }
            if (keyCode >= 48 && keyCode <= 57) {
                return String.fromCharCode(keyCode);
            }
        }

        function formatNumber(input) {
            if (isNaN(parseFloat(input))) {
                return "0.00"; //if the input is invalid just set the value to 0.00
            }
            var num = parseFloat(input);
            return (num / 100).toFixed(2).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");
        }
    });

</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
